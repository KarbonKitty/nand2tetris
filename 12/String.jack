// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length, maxLen;
    field Array content;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let content = Array.new(maxLength);
        }

        let length = 0;
        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLen > 0) {
            do content.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return content[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let content[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = maxLen) {
            do Sys.halt();
        } else {
            let content[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            return;
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, c, d;
        var boolean negative;
        let val = 0;
        let i = 0;
        let negative = false;

        if (charAt(0) = 45) {
            let negative = true;
            let i = 1;
        }

        while (i < length) {
            let c = charAt(i);
            if ((c < 48) | (c > 57)) {
                return val;
            }
            let d = charAt(i) - 48;
            let val = (val * 10) + d;
            let i = i + 1;
        }

        if (negative) {
            let val = -val;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, c, currentVal, tmp1, tmp2;
        var boolean negative;
        let length = 0;
        let negative = false;

        if (val < 0) {
            let val = -val;
            let negative = true;
        }

        let tmp1 = val / 10;
        let lastDigit = val - (tmp1 * 10);
        let c = lastDigit + 48;

        if (val < 10) {
            let length = 1;
            let content[0] = c;
        } else {
            do setInt(tmp1);
            do appendChar(c);
        }

        if (negative) {
            let length = length + 1;
            let tmp1 = length;
            while (tmp1 > 0) {
                let content[tmp1] = content[tmp1 - 1];
                let tmp1 = tmp1 - 1;
            }
            let content[0] = 45;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
